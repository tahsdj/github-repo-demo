{"version":3,"sources":["components/repo/index.js","useInfiniteScroll.js","App.js","serviceWorker.js","index.js"],"names":["Repository","title","description","url","className","href","target","useInfiniteScroll","initState","useState","repos","setRepos","page","setPage","isFetching","setFetchingStatus","stop","setStop","scrollEventHandler","contentHeight","document","body","scrollHeight","visibleHeight","clientHeight","window","scrollY","fetch","then","res","json","data","length","prev","catch","err","console","log","useEffect","addEventListener","removeEventListener","initialState","App","state","setState","map","repo","index","key","name","svn_url","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAaeA,MAVf,YAAgD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,YAAaC,EAAM,EAANA,IACrC,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,SAASH,GACvB,uBAAGG,UAAU,eAAeF,GAC5B,uBAAGE,UAAU,OAAOC,KAAMF,EAAKG,OAAO,UAAUH,KCN/CI,EAAoB,SAACC,GAAe,IAAD,EAClBC,mBAASD,EAAUE,OADD,mBACrCA,EADqC,KAC9BC,EAD8B,OAEpBF,mBAASD,EAAUI,MAFC,mBAErCA,EAFqC,KAE/BC,EAF+B,OAGJJ,mBAASD,EAAUM,YAHf,mBAGrCA,EAHqC,KAGzBC,EAHyB,OAIpBN,oBAAS,GAJW,mBAIrCO,EAJqC,KAI/BC,EAJ+B,KAM5C,SAASC,IACP,IAAMC,EAAgBC,SAASC,KAAKC,aAC9BC,EAAgBH,SAASC,KAAKG,aACbC,OAAOC,QACeH,GAAiBJ,EAAgB,KACjDL,IAC3BC,GAAkB,GAClBY,MAAM,kDAAD,OAAmDf,EAAnD,iBACAgB,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAG,GAEkB,IAAhBA,EAAKC,OAAef,GAAQ,IAEjCJ,GAAQ,SAAAD,GAAI,OAAEA,EAAK,KACnBD,GAAS,SAAAsB,GAAI,4BAAMA,GAAN,YAAeF,QAE5BhB,GAAkB,MAErBmB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZpB,GAAkB,OAc9B,OATAuB,qBAAU,WAGN,OADKtB,GAAMS,OAAOc,iBAAiB,SAAUrB,GACtC,kBAAMO,OAAOe,oBAAoB,SAAStB,MACnD,CAACR,EAAOE,EAAME,EAAYE,IAKrB,CAHO,CAACN,QAAOE,OAAME,cACX,CAACH,WAAUE,UAASE,uBCnCnC0B,EAAe,CACnB/B,MAAO,GACPE,KAAM,EACNE,YAAY,GAsCC4B,MAnCf,WAAgB,IAAD,EACanC,EAAkBkC,GAD/B,mBACNE,EADM,KACCC,EADD,KAENlC,EAA2BiC,EAA3BjC,MAAOE,EAAoB+B,EAApB/B,KAAME,EAAc6B,EAAd7B,WACbH,EAAwCiC,EAAxCjC,SAAUE,EAA8B+B,EAA9B/B,QAASE,EAAqB6B,EAArB7B,kBAiB1B,OAdAuB,qBAAU,WACRvB,GAAkB,GAClBY,MAAM,kDAAD,OAAmDf,EAAnD,iBACFgB,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAG,GACLpB,GAAS,SAAAsB,GAAI,4BAAMA,GAAN,YAAeF,OAC5BlB,GAAQ,SAAAD,GAAI,OAAEA,EAAK,KACnBG,GAAkB,MAEnBmB,OAAO,SAAAC,GACNC,QAAQC,IAAIF,GACZpB,GAAkB,QAEtB,IAEA,yBAAKX,UAAU,OACXM,EAAMmC,KAAK,SAACC,EAAKC,GAAN,OACX,kBAAC,EAAD,CACEC,IAAG,eAAUD,GACb9C,MAAO6C,EAAKG,KACZ/C,YAAa4C,EAAK5C,YAClBC,IAAK2C,EAAKI,aAGZpC,GAAc,yBAAKV,UAAU,OAAf,iBC7BF+C,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.ecefbc78.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.sass'\r\n\r\nfunction Repository({title, description, url}) {\r\n    return (\r\n        <div className=\"repo\">\r\n            <h2 className=\"title\">{title}</h2>\r\n            <p className=\"description\">{description}</p>\r\n            <a className=\"link\" href={url} target=\"_blank\">{url}</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Repository","import { useState, useEffect } from 'react'\r\n\r\nexport const useInfiniteScroll = (initState) => {\r\n    const [repos, setRepos] = useState(initState.repos)\r\n    const [page, setPage] = useState(initState.page)\r\n    const [isFetching, setFetchingStatus] = useState(initState.isFetching)\r\n    const [stop, setStop] = useState(false)\r\n  \r\n    function scrollEventHandler() {\r\n      const contentHeight = document.body.scrollHeight\r\n      const visibleHeight = document.body.clientHeight\r\n      const overFlowHeight = window.scrollY\r\n      const isOverCertainHeight = overFlowHeight + visibleHeight >= contentHeight - 50\r\n      if ( isOverCertainHeight && !isFetching ) {\r\n        setFetchingStatus(true)\r\n        fetch(`https://api.github.com/users/tahsdj/repos?page=${page}&per_page=10`)\r\n            .then( res => res.json())\r\n            .then( data => {\r\n                // if the response data is empty, stop to request\r\n                if ( data.length === 0 ) setStop(true)\r\n                else {\r\n                setPage(page=>page+1)\r\n                setRepos(prev=>[...prev, ...data])\r\n                }\r\n                setFetchingStatus(false)\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n                setFetchingStatus(false)\r\n            })\r\n      }\r\n  }\r\n  \r\n    useEffect(()=>{\r\n        // if there is no new repository, do not trigger the scroll event\r\n        if (!stop) window.addEventListener(\"scroll\", scrollEventHandler)\r\n        return () => window.removeEventListener(\"scroll\",scrollEventHandler)\r\n    },[repos, page, isFetching, stop])\r\n  \r\n    const state = {repos, page, isFetching}\r\n    const setState = {setRepos, setPage, setFetchingStatus}\r\n\r\n    return [state, setState]\r\n  }","import React, { useEffect } from 'react'\nimport './App.sass'\nimport Repository from './components/repo'\nimport { useInfiniteScroll } from './useInfiniteScroll.js'\n\nconst initialState = {\n  repos: [],\n  page: 1,\n  isFetching: false\n}\n\nfunction App() {\n  const [state, setState] = useInfiniteScroll(initialState)\n  const {repos, page, isFetching} = state\n  const {setRepos, setPage, setFetchingStatus} = setState\n\n  // fetch the data when App is at the first render\n  useEffect(()=>{\n    setFetchingStatus(true)\n    fetch(`https://api.github.com/users/tahsdj/repos?page=${page}&per_page=10`)\n      .then( res => res.json())\n      .then( data => {\n        setRepos(prev=>[...prev, ...data])\n        setPage(page=>page+1)\n        setFetchingStatus(false)\n      })\n      .catch( err => {\n        console.log(err)\n        setFetchingStatus(false)\n      })\n  },[])\n  return (\n    <div className=\"App\">\n      { repos.map( (repo,index) => (\n        <Repository \n          key={`repo-${index}`}\n          title={repo.name} \n          description={repo.description}\n          url={repo.svn_url}\n          />\n      ))}\n      { isFetching && <div className=\"msg\">fetching...</div>}\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}